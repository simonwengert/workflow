{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3b4f1538-13e6-4477-8ad9-55686c8cfacd",
   "metadata": {},
   "source": [
    "# Generating Dimer Structures \n",
    "\n",
    "For the generation of machine-learned interatomic potentials dimer curves represent a source of information frequently included in a training set. \n",
    "In Workflow the generation of corresponding structures can be performed with the `wfl.generate.atoms_and_dimers.prepare` routine.\n",
    "\n",
    "The example below illustrates its application to a system containing hydrogen and oxygen atoms. \n",
    "At first, we define an `OutputSpec` that will be used to handle the output, i.e. the structural data we are going to generate.\n",
    "For the generation itself the `prepare()` function is executed where the `atomic_numbers` arguments specifies which combinations \n",
    "of species to consider (here all combinations between H and O, i.e. H-H, H-O and O-O). The `bond_lengths` argument allows us to specify \n",
    "a characteristic length that is used to sample a range of dimer distances. While isolated atoms are another source of information frequently\n",
    "added to a training set, in this example we are interested in dimers only and, thus, set `do_isolated_atoms=False`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed98bb02-f754-4ab4-bb41-0c75c956824d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from wfl.configset import OutputSpec\n",
    "from wfl.generate import atoms_and_dimers\n",
    "\n",
    "\n",
    "outputspec = OutputSpec(files='dimers.xyz')\n",
    "\n",
    "outputs = atoms_and_dimers.prepare(\n",
    "    outputs=outputspec,\n",
    "    atomic_numbers=[1, 8],\n",
    "    bond_lengths={1: 0.74, 8:1.21},\n",
    "    do_isolated_atoms=False,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "722d2dc2-7619-4e7f-a7d0-eeb5c4f8b9a1",
   "metadata": {
    "nbsphinx": "hidden",
    "tags": []
   },
   "outputs": [],
   "source": [
    "dimer_combinations = set(['-'.join(dimer_i.get_chemical_symbols()) for dimer_i in outputs])\n",
    "assert dimer_combinations == {'H-H', 'H-O', 'O-O'}, \\\n",
    "       f\"Obtained dimer combinations {sorted(dimer_combinations)}, expected {sorted({'H-H', 'H-O', 'O-O'})}\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51c8f1be-267c-44dd-8002-5877f553db07",
   "metadata": {},
   "source": [
    "With Workflow the generation of dimer structures can be as simple as shown in the example. However, additional arguments can be passed \n",
    "to the function for more tailored outputs---for instance by adjusting the range of dimer distances to be sampled."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
